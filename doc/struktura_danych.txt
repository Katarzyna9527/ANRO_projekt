Struktura danych

Mapa => Światła przy inicjalizacji oraz Mapa => Skrzyżowanie przy inicjalizacji

LightNode 
{
	int16 ID;
	int16[] neighboursID; //zawsze 4 elementowy
	int16[] lenghts;//zawsze 4 elementowy
}

Pierwszy element to strona północna i poruszamy się z ruchem wskazówek 0 albo wartości ujemne uznajemy za brak połączenia w tę 
stronę.
Podczas pracy skrzyżowania i świateł, te drugie publikują na topic “**/ID”, gdzie ID to ID odebrany przy inicjalizacji od mapy.

Światła => Skrzyżowanie i Wizualizacja

State
{ 
	Bool A;	// czy możesz przejchać do A
	Bool B;	// czy możesz przejechać do B
	Bool C;
	Bool D;
}

LightState
{
	State n;
	State e;
	State s;
	State w;
}

W związku z moim bółędem i połączeniu miliona koncepcji na raz oraz złym zrozumieniu tematu jestem zmuszony przebudować 
struktury danych. Powtarzam, że bedziemy pracować na topicach, a więc musimy komunikować się jedną strukturą w odrębie jednego 
topicu. 

AutoCrossMessage
{
	Int16 autoID;			//samochód  zgłaszający albo do którego kierowana jest odpowiedź
	Int16 direction;		//przy pierwszym zapytaniu = -1
	Bool isCrossed;			//informuje o tym, czy samochód opuścił skrzyżowanie
	Int[] avaibleDirections;	//dostępne skręty
	Int lenght;			//odległość do naspnego skrzyżowania
	Int nextCrossID;		//
	Int previusAutoID;		//
}

Samochód =>samochód  //sprawdzić czy nie gadam z samym sobą 
AutoAutoReq
{
	Int16 startCrossID;
	Int16 endCrossID;
}
AutoAutoResponse
{
	Int32 distance;
}

Jak opuścił dorgę samochód do wysyła info tym, którzy się pytali.

Wizualizacja pobiera mapę na początku
Potem nasłuchuje topicu, do którego piszą samochody
{
	Int16 autoID;			//ID samochodu
	Int16 startCrossID; 		//poczatkowe skrzyżowanie
	Int16 endCrossID		//końcowe skrzyżowanie
	Int32 distance;			//pokonany dystans
}


UWAGA ważne
Jeśli zakłądamy, że każdy nowy obiekt pyta się mapy o dane to:
1. mapa musi przechowywać dane i nadawać np pokolei kolejne indeksy
2. LightNode będzie tylko odpowiedzią na rządanie 
